kind: ConfigMap
apiVersion: v1
metadata:
  name: logstash-configmap
  namespace: elk-logger
  
data:
  logstash.conf: |
    # all input will come from filebeat, no local logs
    input {
      udp {
        port => 5555
      }
      beats {
        port => 5044
      }
    }
    filter {
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
        }
      }
      if [ClientHost] {
        geoip {
          source => "ClientHost"
        }
      }
    }
    output {
        elasticsearch {
            hosts => [ "elasticsearch-logging:9200" ]
        }
    }
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: logstash-deployment
  namespace: elk-logger 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: logstash-configmap
            items:
              - key: logstash.yml
                path: logstash.yml
        - name: logstash-pipeline-volume
          configMap:
            name: logstash-configmap
            items:
              - key: logstash.conf
                path: logstash.conf
      containers:
        - name: logstash
          image: 'docker.elastic.co/logstash/logstash:6.3.0'
          ports:
            - containerPort: 5044
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/logstash/config
            - name: logstash-pipeline-volume
              mountPath: /usr/share/logstash/pipeline
---
kind: Service
apiVersion: v1
metadata:
  name: logstash-service
  namespace: elk-logger
spec:
  ports:
    - name: tcp
      protocol: TCP
      port: 5044
      targetPort: 5044
    - name: udp
      protocol: UDP
      port: 5555
      targetPort: 5555
  selector:
    app: logstash
  type: ClusterIP

         
